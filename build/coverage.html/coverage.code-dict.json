{"/home/travis/build/npmtest/node-npmtest-director/test.js":"/* istanbul instrument in package npmtest_director */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-director/lib.npmtest_director.js":"/* istanbul instrument in package npmtest_director */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_director = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_director = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-director/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-director && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_director */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_director\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_director.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_director.rollup.js'] =\n            local.assetsDict['/assets.npmtest_director.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_director.__dirname + '/lib.npmtest_director.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-director/node_modules/director/lib/director.js":"\n\n\nexports.Router = require('./director/router').Router;\nexports.http   = require('./director/http');\nexports.cli    = require('./director/cli');\n","/home/travis/build/npmtest/node-npmtest-director/node_modules/director/lib/director/router.js":"/*\n * router.js: Base functionality for the router.\n *\n * (C) 2011, Charlie Robbins, Paolo Fragomeni, & the Contributors.\n * MIT LICENSE\n *\n */\n\nvar QUERY_SEPARATOR = /\\?.*/;\n\n//\n// Helper function to turn flatten an array.\n//\nfunction _flatten (arr) {\n  var flat = [];\n\n  for (var i = 0, n = arr.length; i < n; i++) {\n    flat = flat.concat(arr[i]);\n  }\n\n  return flat;\n}\n\n//\n// Helper function for wrapping Array.every\n// in the browser.\n//\nfunction _every (arr, iterator) {\n  for (var i = 0; i < arr.length; i += 1) {\n    if (iterator(arr[i], i, arr) === false) {\n      return;\n    }\n  }\n}\n\n//\n// Helper function for performing an asynchronous every\n// in series in the browser and the server.\n//\nfunction _asyncEverySeries (arr, iterator, callback) {\n  if (!arr.length) {\n    return callback();\n  }\n\n  var completed = 0;\n  (function iterate() {\n    iterator(arr[completed], function (err) {\n      if (err || err === false) {\n        callback(err);\n        callback = function () {};\n      }\n      else {\n        completed += 1;\n        if (completed === arr.length) {\n          callback();\n        }\n        else {\n          iterate();\n        }\n      }\n    });\n  })();\n}\n\n//\n// Helper function for expanding \"named\" matches\n// (e.g. `:dog`, etc.) against the given set\n// of params:\n//\n//    {\n//      ':dog': function (str) {\n//        return str.replace(/:dog/, 'TARGET');\n//      }\n//      ...\n//    }\n//\nfunction paramifyString(str, params, mod) {\n  mod = str;\n  for (var param in params) {\n    if (params.hasOwnProperty(param)) {\n      mod = params[param](str);\n      if (mod !== str) { break; }\n    }\n  }\n\n  return mod === str\n    ? '([._a-zA-Z0-9-%()]+)'\n    : mod;\n}\n\n//\n// Helper function for expanding wildcards (*) and\n// \"named\" matches (:whatever)\n//\nfunction regifyString(str, params) {\n  var matches,\n      last = 0,\n      out = '';\n\n  while (matches = str.substr(last).match(/[^\\w\\d\\- %@&]*\\*[^\\w\\d\\- %@&]*/)) {\n    last = matches.index + matches[0].length;\n    matches[0] = matches[0].replace(/^\\*/, '([_\\.\\(\\)!\\\\ %@&a-zA-Z0-9-]+)');\n    out += str.substr(0, matches.index) + matches[0];\n  }\n\n  str = out += str.substr(last);\n\n   var captures = str.match(/:([^\\/]+)/ig),\n       capture,\n       length;\n\n   if (captures) {\n     length = captures.length;\n     for (var i = 0; i < length; i++) {\n       capture = captures[i];\n       if ( capture.slice(0, 2) === \"::\" ) {\n           // This parameter was escaped and should be left in the url as a literal\n           // Remove the escaping : from the beginning\n           str = capture.slice( 1 );\n       } else {\n           str = str.replace(capture, paramifyString(capture, params));\n  }\n     }\n   }\n\n  return str;\n}\n\n//\n// ### Fix unterminated RegExp groups in routes.\n//\nfunction terminator(routes, delimiter, start, stop) {\n  var last = 0,\n      left = 0,\n      right = 0,\n      start = (start || '(').toString(),\n      stop = (stop || ')').toString(),\n      i;\n\n  for (i = 0; i < routes.length; i++) {\n    var chunk = routes[i];\n\n    if ((chunk.indexOf(start, last) > chunk.indexOf(stop, last)) ||\n        (~chunk.indexOf(start, last) && !~chunk.indexOf(stop, last)) ||\n        (!~chunk.indexOf(start, last) && ~chunk.indexOf(stop, last))) {\n\n      left = chunk.indexOf(start, last);\n      right = chunk.indexOf(stop, last);\n\n      if ((~left && !~right) || (!~left && ~right)) {\n        var tmp = routes.slice(0, (i || 1) + 1).join(delimiter);\n        routes = [tmp].concat(routes.slice((i || 1) + 1));\n      }\n\n      last = (right > left ? right : left) + 1;\n      i = 0;\n    }\n    else {\n      last = 0;\n    }\n  }\n\n  return routes;\n}\n\n\n\n//\n// ### function Router (routes)\n// #### @routes {Object} **Optional** Routing table for this instance.\n// Constuctor function for the Router object responsible for building\n// and dispatching from a given routing table.\n//\nvar Router = exports.Router = function (routes) {\n  this.params   = {};\n  this.routes   = {};\n  this.methods  = ['on', 'after', 'before'];\n  this.scope    = [];\n  this._methods = {};\n\n  this.configure();\n  this.mount(routes || {});\n};\n\n//\n// ### function configure (options)\n// #### @options {Object} **Optional** Options to configure this instance with\n// Configures this instance with the specified `options`.\n//\nRouter.prototype.configure = function (options) {\n  options = options || {};\n\n  for (var i = 0; i < this.methods.length; i++) {\n    this._methods[this.methods[i]] = true;\n  }\n\n  this.recurse   = typeof options.recurse === 'undefined' ? this.recurse || false : options.recurse;\n  this.async     = options.async     || false;\n  this.delimiter = options.delimiter || '\\/';\n  this.strict    = typeof options.strict === 'undefined' ? true : options.strict;\n  this.notfound  = options.notfound;\n  this.resource  = options.resource;\n\n  // Client only, but browser.js does not include a super implementation\n  this.history     = (options.html5history && this.historySupport) || false;\n  this.run_in_init = (this.history === true && options.run_handler_in_init !== false);\n  this.convert_hash_in_init = (this.history === true && options.convert_hash_in_init !== false);\n\n  //\n  // TODO: Global once\n  //\n  this.every = {\n    after: options.after || null,\n    before: options.before || null,\n    on: options.on || null\n  };\n\n  return this;\n};\n\n//\n// ### function param (token, regex)\n// #### @token {string} Token which to replace (e.g. `:dog`, 'cat')\n// #### @matcher {string|RegExp} Target to replace the token with.\n// Setups up a `params` function which replaces any instance of `token`,\n// inside of a given `str` with `matcher`. This is very useful if you\n// have a common regular expression throughout your code base which\n// you wish to be more DRY.\n//\nRouter.prototype.param = function (token, matcher) {\n  if (token[0] !== ':') {\n    token = ':' + token;\n  }\n\n  var compiled = new RegExp(token, 'g');\n  this.params[token] = function (str) {\n    return str.replace(compiled, matcher.source || matcher);\n  };\n  return this;\n};\n\n//\n// ### function on (method, path, route)\n// #### @method {string} **Optional** Method to use\n// #### @path {Array|string} Path to set this route on.\n// #### @route {Array|function} Handler for the specified method and path.\n// Adds a new `route` to this instance for the specified `method`\n// and `path`.\n//\nRouter.prototype.on = Router.prototype.route = function (method, path, route) {\n  var self = this;\n\n  if (!route && typeof path == 'function') {\n    //\n    // If only two arguments are supplied then assume this\n    // `route` was meant to be a generic `on`.\n    //\n    route = path;\n    path = method;\n    method = 'on';\n  }\n\n  if (Array.isArray(path)) {\n    return path.forEach(function(p) {\n      self.on(method, p, route);\n    });\n  }\n\n  if (path.source) {\n    path = path.source.replace(/\\\\\\//ig, '/');\n  }\n\n  if (Array.isArray(method)) {\n    return method.forEach(function (m) {\n      self.on(m.toLowerCase(), path, route);\n    });\n  }\n\n  //\n  // ### Split the route up by the delimiter.\n  //\n  path = path.split(new RegExp(this.delimiter));\n\n  //\n  // ### Fix unterminated groups. Fixes #59\n  //\n  path = terminator(path, this.delimiter);\n\n  this.insert(method, this.scope.concat(path), route);\n};\n\n//\n// ### function path (path, routesFn)\n// #### @path {string|RegExp} Nested scope in which to path\n// #### @routesFn {function} Function to evaluate in the new scope\n// Evalutes the `routesFn` in the given path scope.\n//\nRouter.prototype.path = function (path, routesFn) {\n  var self = this,\n      length = this.scope.length;\n\n  if (path.source) {\n    path = path.source.replace(/\\\\\\//ig, '/');\n  }\n\n  //\n  // ### Split the route up by the delimiter.\n  //\n  path = path.split(new RegExp(this.delimiter));\n\n  //\n  // ### Fix unterminated groups.\n  //\n  path = terminator(path, this.delimiter);\n  this.scope = this.scope.concat(path);\n\n  routesFn.call(this, this);\n  this.scope.splice(length, path.length);\n};\n\n//\n// ### function dispatch (method, path[, callback])\n// #### @method {string} Method to dispatch\n// #### @path {string} Path to dispatch\n// #### @callback {function} **Optional** Continuation to respond to for async scenarios.\n// Finds a set of functions on the traversal towards\n// `method` and `path` in the core routing table then\n// invokes them based on settings in this instance.\n//\nRouter.prototype.dispatch = function (method, path, callback) {\n  var self = this,\n      fns = this.traverse(method, path.replace(QUERY_SEPARATOR, ''), this.routes, ''),\n      invoked = this._invoked,\n      after;\n\n  this._invoked = true;\n  if (!fns || fns.length === 0) {\n    this.last = [];\n    if (typeof this.notfound === 'function') {\n      this.invoke([this.notfound], { method: method, path: path }, callback);\n    }\n\n    return false;\n  }\n\n  if (this.recurse === 'forward') {\n    fns = fns.reverse();\n  }\n\n  function updateAndInvoke() {\n    self.last = fns.after;\n    self.invoke(self.runlist(fns), self, callback);\n  }\n\n  //\n  // Builds the list of functions to invoke from this call\n  // to dispatch conforming to the following order:\n  //\n  // 1. Global after (if any)\n  // 2. After functions from the last call to dispatch\n  // 3. Global before (if any)\n  // 4. Global on (if any)\n  // 5. Matched functions from routing table (`['before', 'on'], ['before', 'on`], ...]`)\n  //\n  after = this.every && this.every.after\n    ? [this.every.after].concat(this.last)\n    : [this.last];\n\n  if (after && after.length > 0 && invoked) {\n    if (this.async) {\n      this.invoke(after, this, updateAndInvoke);\n    }\n    else {\n      this.invoke(after, this);\n      updateAndInvoke();\n    }\n\n    return true;\n  }\n\n  updateAndInvoke();\n  return true;\n};\n\n//\n// ### function runlist (fns)\n// #### @fns {Array} List of functions to include in the runlist\n// Builds the list of functions to invoke from this call\n// to dispatch conforming to the following order:\n//\n// 1. Global before (if any)\n// 2. Global on (if any)\n// 3. Matched functions from routing table (`['before', 'on'], ['before', 'on`], ...]`)\n//\nRouter.prototype.runlist = function (fns) {\n  var runlist = this.every && this.every.before\n    ? [this.every.before].concat(_flatten(fns))\n    : _flatten(fns);\n\n  if (this.every && this.every.on) {\n    runlist.push(this.every.on);\n  }\n\n  runlist.captures = fns.captures;\n  runlist.source = fns.source;\n  return runlist;\n};\n\n//\n// ### function invoke (fns, thisArg)\n// #### @fns {Array} Set of functions to invoke in order.\n// #### @thisArg {Object} `thisArg` for each function.\n// #### @callback {function} **Optional** Continuation to pass control to for async `fns`.\n// Invokes the `fns` synchronously or asynchronously depending on the\n// value of `this.async`. Each function must **not** return (or respond)\n// with false, or evaluation will short circuit.\n//\nRouter.prototype.invoke = function (fns, thisArg, callback) {\n  var self = this;\n\n  var apply;\n  if (this.async) {\n    apply = function(fn, next){\n      if (Array.isArray(fn)) {\n        return _asyncEverySeries(fn, apply, next);\n      }\n      else if (typeof fn == 'function') {\n        fn.apply(thisArg, (fns.captures || []).concat(next));\n      }\n    };\n    _asyncEverySeries(fns, apply, function () {\n      //\n      // Ignore the response here. Let the routed take care\n      // of themselves and eagerly return true.\n      //\n\n      if (callback) {\n        callback.apply(thisArg, arguments);\n      }\n    });\n  }\n  else {\n    apply = function(fn){\n      if (Array.isArray(fn)) {\n        return _every(fn, apply);\n      }\n      else if (typeof fn === 'function') {\n        return fn.apply(thisArg, fns.captures || []);\n      }\n      else if (typeof fn === 'string' && self.resource) {\n        self.resource[fn].apply(thisArg, fns.captures || []);\n      }\n    }\n    _every(fns, apply);\n  }\n};\n\n//\n// ### function traverse (method, path, routes, regexp)\n// #### @method {string} Method to find in the `routes` table.\n// #### @path {string} Path to find in the `routes` table.\n// #### @routes {Object} Partial routing table to match against\n// #### @regexp {string} Partial regexp representing the path to `routes`.\n// #### @filter {function} Filter function for filtering routes (expensive).\n// Core routing logic for `director.Router`: traverses the\n// specified `path` within `this.routes` looking for `method`\n// returning any `fns` that are found.\n//\nRouter.prototype.traverse = function (method, path, routes, regexp, filter) {\n  var fns = [],\n      current,\n      exact,\n      match,\n      next,\n      that;\n\n  function filterRoutes(routes) {\n    if (!filter) {\n      return routes;\n    }\n\n    function deepCopy(source) {\n      var result = [];\n      for (var i = 0; i < source.length; i++) {\n        result[i] = Array.isArray(source[i]) ? deepCopy(source[i]) : source[i];\n      }\n      return result;\n    }\n\n    function applyFilter(fns) {\n      for (var i = fns.length - 1; i >= 0; i--) {\n        if (Array.isArray(fns[i])) {\n          applyFilter(fns[i]);\n          if (fns[i].length === 0) {\n            fns.splice(i, 1);\n          }\n        }\n        else {\n          if (!filter(fns[i])) {\n            fns.splice(i, 1);\n          }\n        }\n      }\n    }\n\n    var newRoutes = deepCopy(routes);\n    newRoutes.matched = routes.matched;\n    newRoutes.captures = routes.captures;\n    newRoutes.after = routes.after.filter(filter);\n\n    applyFilter(newRoutes);\n\n    return newRoutes;\n  }\n\n  //\n  // Base Case #1:\n  // If we are dispatching from the root\n  // then only check if the method exists.\n  //\n  if (path === this.delimiter && routes[method]) {\n    next = [[routes.before, routes[method]].filter(Boolean)];\n    next.after = [routes.after].filter(Boolean);\n    next.matched = true;\n    next.captures = [];\n    return filterRoutes(next);\n  }\n\n  for (var r in routes) {\n    //\n    // We dont have an exact match, lets explore the tree\n    // in a depth-first, recursive, in-order manner where\n    // order is defined as:\n    //\n    //    ['before', 'on', '<method>', 'after']\n    //\n    // Remember to ignore keys (i.e. values of `r`) which\n    // are actual methods (e.g. `on`, `before`, etc), but\n    // which are not actual nested route (i.e. JSON literals).\n    //\n    if (routes.hasOwnProperty(r) && (!this._methods[r] ||\n      this._methods[r] && typeof routes[r] === 'object' && !Array.isArray(routes[r]))) {\n      //\n      // Attempt to make an exact match for the current route\n      // which is built from the `regexp` that has been built\n      // through recursive iteration.\n      //\n      current = exact = regexp + this.delimiter + r;\n\n      if (!this.strict) {\n        exact += '[' + this.delimiter + ']?';\n      }\n\n      match = path.match(new RegExp('^' + exact));\n\n      if (!match) {\n        //\n        // If there isn't a `match` then continue. Here, the\n        // `match` is a partial match. e.g.\n        //\n        //    '/foo/bar/buzz'.match(/^\\/foo/)   // ['/foo']\n        //    '/no-match/route'.match(/^\\/foo/) // null\n        //\n        continue;\n      }\n\n      if (match[0] && match[0] == path && routes[r][method]) {\n        //\n        // ### Base case 2:\n        // If we had a `match` and the capture is the path itself,\n        // then we have completed our recursion.\n        //\n        next = [[routes[r].before, routes[r][method]].filter(Boolean)];\n        next.after = [routes[r].after].filter(Boolean);\n        next.matched = true;\n        next.captures = match.slice(1);\n\n        if (this.recurse && routes === this.routes) {\n          next.push([routes.before, routes.on].filter(Boolean));\n          next.after = next.after.concat([routes.after].filter(Boolean));\n        }\n\n        return filterRoutes(next);\n      }\n\n      //\n      // ### Recursive case:\n      // If we had a match, but it is not yet an exact match then\n      // attempt to continue matching against the next portion of the\n      // routing table.\n      //\n      next = this.traverse(method, path, routes[r], current);\n\n      //\n      // `next.matched` will be true if the depth-first search of the routing\n      // table from this position was successful.\n      //\n      if (next.matched) {\n        //\n        // Build the in-place tree structure representing the function\n        // in the correct order.\n        //\n        if (next.length > 0) {\n          fns = fns.concat(next);\n        }\n\n        if (this.recurse) {\n          fns.push([routes[r].before, routes[r][method]].filter(Boolean));\n          next.after = next.after.concat([routes[r].after].filter(Boolean));\n\n          if (routes === this.routes) {\n            fns.push([routes['before'], routes['on']].filter(Boolean));\n            next.after = next.after.concat([routes['after']].filter(Boolean));\n          }\n        }\n\n        fns.matched = true;\n        fns.captures = next.captures;\n        fns.after = next.after;\n\n        //\n        // ### Base case 2:\n        // Continue passing the partial tree structure back up the stack.\n        // The caller for `dispatch()` will decide what to do with the functions.\n        //\n        return filterRoutes(fns);\n      }\n    }\n  }\n\n  return false;\n};\n\n//\n// ### function insert (method, path, route, context)\n// #### @method {string} Method to insert the specific `route`.\n// #### @path {Array} Parsed path to insert the `route` at.\n// #### @route {Array|function} Route handlers to insert.\n// #### @parent {Object} **Optional** Parent \"routes\" to insert into.\n// Inserts the `route` for the `method` into the routing table for\n// this instance at the specified `path` within the `context` provided.\n// If no context is provided then `this.routes` will be used.\n//\nRouter.prototype.insert = function (method, path, route, parent) {\n  var methodType,\n      parentType,\n      isArray,\n      nested,\n      part;\n\n  path = path.filter(function (p) {\n    return p && p.length > 0;\n  });\n\n  parent = parent || this.routes;\n  part = path.shift();\n  if (/\\:|\\*/.test(part) && !/\\\\d|\\\\w/.test(part)) {\n    part = regifyString(part, this.params);\n  }\n\n  if (path.length > 0) {\n    //\n    // If this is not the last part left in the `path`\n    // (e.g. `['cities', 'new-york']`) then recurse into that\n    // child\n    //\n    parent[part] = parent[part] || {};\n    return this.insert(method, path, route, parent[part]);\n  }\n\n  //\n  // If there is no part and the path has been exhausted\n  // and the parent is the root of the routing table,\n  // then we are inserting into the root and should\n  // only dive one level deep in the Routing Table.\n  //\n  if (!part && !path.length && parent === this.routes) {\n    methodType = typeof parent[method];\n\n    switch (methodType) {\n      case 'function':\n        parent[method] = [parent[method], route];\n        return;\n      case 'object':\n        parent[method].push(route);\n        return;\n      case 'undefined':\n        parent[method] = route;\n        return;\n    }\n\n    return;\n  }\n\n  //\n  // Otherwise, we are at the end of our insertion so we should\n  // insert the `route` based on the `method` after getting the\n  // `parent` of the last `part`.\n  //\n  parentType = typeof parent[part];\n  isArray = Array.isArray(parent[part]);\n\n  if (parent[part] && !isArray && parentType == 'object') {\n    methodType = typeof parent[part][method];\n\n    switch (methodType) {\n      case 'function':\n        parent[part][method] = [parent[part][method], route];\n        return;\n      case 'object':\n        parent[part][method].push(route);\n        return;\n      case 'undefined':\n        parent[part][method] = route;\n        return;\n    }\n  }\n  else if (parentType == 'undefined') {\n    nested = {};\n    nested[method] = route;\n    parent[part] = nested;\n    return;\n  }\n\n  throw new Error('Invalid route context: ' + parentType);\n};\n\n\n//\n// ### function extend (methods)\n// #### @methods {Array} List of method names to extend this instance with\n// Extends this instance with simple helper methods to `this.on`\n// for each of the specified `methods`\n//\nRouter.prototype.extend = function(methods) {\n  var self = this,\n      len = methods.length,\n      i;\n\n  function extend(method) {\n    self._methods[method] = true;\n    self[method] = function () {\n      var extra = arguments.length === 1\n        ? [method, '']\n        : [method];\n\n      self.on.apply(self, extra.concat(Array.prototype.slice.call(arguments)));\n    };\n  }\n\n  for (i = 0; i < len; i++) {\n    extend(methods[i]);\n  }\n};\n\n//\n// ### function mount (routes, context)\n// #### @routes {Object} Routes to mount onto this instance\n// Mounts the sanitized `routes` onto the root context for this instance.\n//\n// e.g.\n//\n//    new Router().mount({ '/foo': { '/bar': function foobar() {} } })\n//\n// yields\n//\n//    { 'foo': 'bar': function foobar() {} } }\n//\nRouter.prototype.mount = function(routes, path) {\n  if (!routes || typeof routes !== \"object\" || Array.isArray(routes)) {\n    return;\n  }\n\n  var self = this;\n  path = path || [];\n  if (!Array.isArray(path)) {\n    path = path.split(self.delimiter);\n  }\n\n  function insertOrMount(route, local) {\n    var rename = route,\n        parts = route.split(self.delimiter),\n        routeType = typeof routes[route],\n        isRoute = parts[0] === \"\" || !self._methods[parts[0]],\n        event = isRoute ? \"on\" : rename;\n\n    if (isRoute) {\n      rename = rename.slice((rename.match(new RegExp('^' + self.delimiter)) || [''])[0].length);\n      parts.shift();\n    }\n\n    if (isRoute && routeType === 'object' && !Array.isArray(routes[route])) {\n      local = local.concat(parts);\n      self.mount(routes[route], local);\n      return;\n    }\n\n    if (isRoute) {\n      local = local.concat(rename.split(self.delimiter));\n      local = terminator(local, self.delimiter);\n    }\n\n    self.insert(event, local, routes[route]);\n  }\n\n  for (var route in routes) {\n    if (routes.hasOwnProperty(route)) {\n      insertOrMount(route, path.slice(0));\n    }\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-director/node_modules/director/lib/director/http/index.js":"var events = require('events'),\n    qs = require('querystring'),\n    util = require('util'),\n    BaseRouter = require('../router').Router,\n    responses = require('./responses');\n\n//\n// ### Expose all HTTP methods and responses\n//\nexports.methods   = require('./methods');\nObject.keys(responses).forEach(function (name) {\n  exports[name] = responses[name];\n});\n\n//\n// ### function Router (routes)\n// #### @routes {Object} **Optional** Routing table for this instance.\n// Constuctor function for the HTTP Router object responsible for building\n// and dispatching from a given routing table.\n//\nvar Router = exports.Router = function (routes) {\n  //\n  // ### Extend the `Router` prototype with all of the RFC methods.\n  //\n  this.params   = {};\n  this.routes   = {};\n  this.methods  = ['on', 'after', 'before'];\n  this.scope    = [];\n  this._methods = {};\n  this.recurse = 'forward';\n  this._attach = [];\n\n  this.extend(exports.methods.concat(['before', 'after']));\n  this.configure();\n  this.mount(routes || {});\n};\n\n//\n// Inherit from `BaseRouter`.\n//\nutil.inherits(Router, BaseRouter);\n\n//\n// ### function configure (options)\n// #### @options {Object} **Optional** Options to configure this instance with\n// Configures this instance with the specified `options`.\n//\nRouter.prototype.configure = function (options) {\n  options = options || {};\n\n  // useful when using connect's bodyParser\n  this.stream = options.stream || false;\n\n  return BaseRouter.prototype.configure.call(this, options);\n};\n\n//\n// ### function on (method, path, route)\n// #### @method {string} **Optional** Method to use\n// #### @path {string} Path to set this route on.\n// #### @route {Array|function} Handler for the specified method and path.\n// Adds a new `route` to this instance for the specified `method`\n// and `path`.\n//\nRouter.prototype.on = function (method, path) {\n  var args = Array.prototype.slice.call(arguments, 2),\n      route = args.pop(),\n      options = args.pop(),\n      accept;\n\n  if (options) {\n    if (options.stream) {\n      route.stream = true;\n    }\n\n    if (options.accept) {\n      this._hasAccepts = true;\n      accept = options.accept;\n      route.accept = (Array.isArray(accept) ? accept : [accept]).map(function (a) {\n        return typeof a === 'string' ? RegExp(a) : a;\n      });\n    }\n  }\n\n  if (typeof path !== 'string' && !path.source) {\n    path = '';\n  }\n\n  BaseRouter.prototype.on.call(this, method, path, route);\n};\n\n//\n// ### function attach (func)\n// ### @func {function} Function to execute on `this` before applying to router function\n// Ask the router to attach objects or manipulate `this` object on which the\n// function passed to the http router will get applied\nRouter.prototype.attach = function (func) {\n  this._attach.push(func);\n};\n\n//\n// ### function dispatch (method, path)\n// #### @req {http.ServerRequest} Incoming request to dispatch.\n// #### @res {http.ServerResponse} Outgoing response to dispatch.\n// #### @callback {function} **Optional** Continuation to respond to for async scenarios.\n// Finds a set of functions on the traversal towards\n// `method` and `path` in the core routing table then\n// invokes them based on settings in this instance.\n//\nRouter.prototype.dispatch = function (req, res, callback) {\n  //\n  // Dispatch `HEAD` requests to `GET`\n  //\n  var method = req.method === 'HEAD' ? 'get' : req.method.toLowerCase(),\n      thisArg = { req: req, res: res },\n      self = this,\n      contentType,\n      runlist,\n      stream,\n      error,\n      fns,\n      url;\n\n  //\n  // Trap bad URLs from `decodeUri`\n  //\n  try { url = decodeURI(req.url.split('?', 1)[0]); }\n  catch (ex) { url = null }\n\n  if (url && this._hasAccepts) {\n    contentType = req.headers['content-type'];\n    fns = this.traverse(method, url, this.routes, '', function (route) {\n      return !route.accept || route.accept.some(function (a) {\n        return a.test(contentType);\n      });\n    });\n  }\n  else if (url) {\n    fns = this.traverse(method, url, this.routes, '');\n  }\n\n  if (this._attach) {\n    for (var i = 0; i < this._attach.length; i++) {\n      this._attach[i].call(thisArg);\n    }\n  }\n\n  if (!fns || fns.length === 0) {\n    error = new exports.NotFound('Could not find path: ' + req.url);\n    if (typeof this.notfound === 'function') {\n      this.notfound.call(thisArg, callback);\n    }\n    else if (callback) {\n      callback.call(thisArg, error, req, res);\n    }\n    return false;\n  }\n\n  if (this.recurse === 'forward') {\n    fns = fns.reverse();\n  }\n\n  runlist = this.runlist(fns);\n  stream  = this.stream || runlist.some(function (fn) { return fn.stream === true; });\n\n  function parseAndInvoke() {\n    error = self.parse(req);\n    if (error) {\n      if (callback) {\n        callback.call(thisArg, error, req, res);\n      }\n      return false;\n    }\n\n    self.invoke(runlist, thisArg, callback);\n  }\n\n  if (!stream) {\n    //\n    // If there is no streaming required on any of the functions on the\n    // way to `path`, then attempt to parse the fully buffered request stream\n    // once it has emitted the `end` event.\n    //\n    if (req.readable) {\n      //\n      // If the `http.ServerRequest` is still readable, then await\n      // the end event and then continue\n      //\n      req.once('end', parseAndInvoke);\n      // Streams2 requires us to start the stream if we're not explicitly\n      // reading from it.\n      req.resume();\n    }\n    else {\n      //\n      // Otherwise, just parse the body now.\n      //\n      parseAndInvoke();\n    }\n  }\n  else {\n    this.invoke(runlist, thisArg, callback);\n  }\n\n  return true;\n};\n\n//\n// ### @parsers {Object}\n// Lookup table of parsers to use when attempting to\n// parse incoming responses.\n//\nRouter.prototype.parsers = {\n  'application/x-www-form-urlencoded': qs.parse,\n  'application/json': JSON.parse\n};\n\n//\n// ### function parse (req)\n// #### @req {http.ServerResponse|BufferedStream} Incoming HTTP request to parse\n// Attempts to parse `req.body` using the value found at `req.headers['content-type']`.\n//\nRouter.prototype.parse = function (req) {\n  function mime(req) {\n    var str = req.headers['content-type'] || '';\n    return str.split(';')[0];\n  }\n\n  var parser = this.parsers[mime(req)],\n      body;\n\n  if (parser) {\n    req.body = req.body || '';\n\n    if (req.chunks) {\n      req.chunks.forEach(function (chunk) {\n        req.body += chunk;\n      });\n    }\n\n    if ('string' === typeof req.body) {\n      try {\n        req.body = req.body && req.body.length\n          ? parser(req.body)\n          : {};\n      }\n      catch (err) {\n        return new exports.BadRequest('Malformed data');\n      }\n    }\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-director/node_modules/director/lib/director/http/responses.js":"//\n// HTTP Error objectst\n//\nvar util = require('util');\n\nexports.NotModified = function () {\n  this.status = 304;\n  this.options = {\n    removeContentHeaders: true\n  };\n};\n\nutil.inherits(exports.NotModified, Error);\n\nexports.BadRequest = function (msg) {\n  msg = msg || 'Bad request';\n\n  this.status = 400;\n  this.headers = {};\n  this.message = msg;\n  this.body = { error: msg };\n};\n\nutil.inherits(exports.BadRequest, Error);\n\nexports.NotAuthorized = function (msg) {\n  msg = msg || 'Not Authorized';\n\n  this.status = 401;\n  this.headers = {};\n  this.message = msg;\n  this.body = { error: msg };\n};\n\nutil.inherits(exports.NotAuthorized, Error);\n\nexports.Forbidden = function (msg) {\n  msg = msg || 'Not Authorized';\n\n  this.status = 403;\n  this.headers = {};\n  this.message = msg;\n  this.body = { error: msg };\n};\n\nutil.inherits(exports.Forbidden, Error);\n\nexports.NotFound = function (msg) {\n  msg = msg || 'Not Found';\n\n  this.status = 404;\n  this.headers = {};\n  this.message = msg;\n  this.body = { error: msg };\n};\n\nutil.inherits(exports.NotFound, Error);\n\nexports.MethodNotAllowed = function (allowed) {\n  var msg = 'method not allowed.';\n\n  this.status = 405;\n  this.headers = { allow: allowed };\n  this.message = msg;\n  this.body = { error: msg };\n};\n\nutil.inherits(exports.MethodNotAllowed, Error);\n\nexports.NotAcceptable = function (accept) {\n  var msg = 'cannot generate \"' + accept + '\" response';\n\n  this.status = 406;\n  this.headers = {};\n  this.message = msg;\n  this.body = {\n    error: msg,\n    only: 'application/json'\n  };\n};\n\nutil.inherits(exports.NotAcceptable, Error);\n\nexports.NotImplemented = function (msg) {\n  msg = msg || 'Not Implemented';\n\n  this.status = 501;\n  this.headers = {};\n  this.message = msg;\n  this.body = { error: msg };\n};\n\nutil.inherits(exports.NotImplemented, Error);\n","/home/travis/build/npmtest/node-npmtest-director/node_modules/director/lib/director/http/methods.js":"/*!\n * Express - router - methods\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n *\n * Adapted for director\n * (C) 2011 Charlie Robbins, Paolo Fraogmeni, & the Contributors.\n *\n */\n\n/**\n * Hypertext Transfer Protocol -- HTTP/1.1\n * http://www.ietf.org/rfc/rfc2616.txt\n */\nvar RFC2616 = ['OPTIONS', 'GET', 'POST', 'PUT', 'DELETE', 'TRACE', 'CONNECT'];\n\n/**\n * HTTP Extensions for Distributed Authoring -- WEBDAV\n * http://www.ietf.org/rfc/rfc2518.txt\n */\nvar RFC2518 = ['PROPFIND', 'PROPPATCH', 'MKCOL', 'COPY', 'MOVE', 'LOCK', 'UNLOCK'];\n\n/**\n * Versioning Extensions to WebDAV\n * http://www.ietf.org/rfc/rfc3253.txt\n */\nvar RFC3253 = ['VERSION-CONTROL', 'REPORT', 'CHECKOUT', 'CHECKIN', 'UNCHECKOUT', 'MKWORKSPACE', 'UPDATE', 'LABEL', 'MERGE', 'BASELINE-CONTROL', 'MKACTIVITY'];\n\n/**\n * Ordered Collections Protocol (WebDAV)\n * http://www.ietf.org/rfc/rfc3648.txt\n */\nvar RFC3648 = ['ORDERPATCH'];\n\n/**\n * Web Distributed Authoring and Versioning (WebDAV) Access Control Protocol\n * http://www.ietf.org/rfc/rfc3744.txt\n */\nvar RFC3744 = ['ACL'];\n\n/**\n * Web Distributed Authoring and Versioning (WebDAV) SEARCH\n * http://www.ietf.org/rfc/rfc5323.txt\n */\nvar RFC5323 = ['SEARCH'];\n\n/**\n * PATCH Method for HTTP\n * http://www.ietf.org/rfc/rfc5789.txt\n */\nvar RFC5789 = ['PATCH'];\n\n/**\n * Expose the methods.\n */\nmodule.exports = [].concat(\n  RFC2616,\n  RFC2518,\n  RFC3253,\n  RFC3648,\n  RFC3744,\n  RFC5323,\n  RFC5789\n).map(function (method) {\n  return method.toLowerCase();\n});\n","/home/travis/build/npmtest/node-npmtest-director/node_modules/director/lib/director/cli.js":"\nvar util = require('util'),\n    BaseRouter = require('./router').Router;\n\nvar Router = exports.Router = function (routes) {\n  BaseRouter.call(this, routes);\n  this.recurse = false;\n};\n\n//\n// Inherit from `BaseRouter`.\n//\nutil.inherits(Router, BaseRouter);\n\n//\n// ### function configure (options)\n// #### @options {Object} **Optional** Options to configure this instance with\n// Configures this instance with the specified `options`.\n//\nRouter.prototype.configure = function (options) {\n  options = options || {};\n  BaseRouter.prototype.configure.call(this, options);\n\n  //\n  // Delimiter must always be `\\s` in CLI routing.\n  // e.g. `jitsu users create`\n  //\n  this.delimiter = '\\\\s';\n  return this;\n};\n\n//\n// ### function dispatch (method, path)\n// #### @method {string} Method to dispatch\n// #### @path {string} Path to dispatch\n// Finds a set of functions on the traversal towards\n// `method` and `path` in the core routing table then\n// invokes them based on settings in this instance.\n//\nRouter.prototype.dispatch = function (method, path, tty, callback) {\n  //\n  // Prepend a single space onto the path so that the traversal\n  // algorithm will recognize it. This is because we always assume\n  // that the `path` begins with `this.delimiter`.\n  //\n  path = ' ' + path;\n  var fns = this.traverse(method, path, this.routes, '');\n  if (!fns || fns.length === 0) {\n    if (typeof this.notfound === 'function') {\n      this.notfound.call({ tty: tty, cmd: path }, callback);\n    }\n    else if (callback) {\n      callback(new Error('Could not find path: ' + path));\n    }\n\n    return false;\n  }\n\n  if (this.recurse === 'forward') {\n    fns = fns.reverse();\n  }\n\n  this.invoke(this.runlist(fns), { tty: tty, cmd: path }, callback);\n  return true;\n};\n"}